@model APCM.Models.Collection.CreateCollectionViewModel
@using System.Text.Json;

@{
    var actionName = Model.isEdit ? "Edit" : "Create";
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.0/font/bootstrap-icons.min.css">
<form asp-action="@actionName" method="post" id="@Model.Id">
    <input type="hidden" asp-for="Id" value="@Model.Id"/>
    <div class="mt-3">
        <label class="form-label">Title</label>
        <input type="text" class="form-control" asp-for="Title" />
    </div>
    <div class="mt-3">
        <label class="form-label">Category</label>
        <input type="text" class="form-control" asp-for="Category" />
    </div>
    <div class="mt-3">
        <label class="form-label">Description</label>
        <textarea class="form-control" asp-for="Description" rows="4"></textarea>
    </div>
    <input type="hidden" asp-for="UserId"/>
    <div class="mt-3 d-flex align-items-center">
        <select id="fieldTypeSelector" class="form-select">
            <option value="int">Int</option>
            <option value="string">String</option>
            <option value="multiline">Multiline</option>
            <option value="bool">Bool</option>
            <option value="date">Date</option>
        </select>
        <button id="addFieldButton" type="button" class="btn btn-secondary" style="margin-left: 5px;" onclick="addNewField()">Add</button>
    </div>
    <div id="customFieldsContainer" class="mt-3">
    </div>

    <div class="mt-3 d-flex justify-content-center">
        <button type="submit" class="btn btn-primary btn-block" style="width: 200px;">Submit</button>
    </div>
</form>

<script>
    var customFields = @Html.Raw(Json.Serialize(Model.CustomFields ?? new List<APCM.Models.Collection.CustomFieldViewModel>()));
    function addNewField() {
        var type = document.getElementById("fieldTypeSelector").value;
        if (type === "") {
            alert("Please Select a type!");
        } else {
            const id = Math.floor(Math.random() * 1000000000).toString();
            var htmlField = createField(id, type, "");
            document.getElementById("customFieldsContainer").insertAdjacentHTML("afterbegin", htmlField);
        }
    }

    function createField(fieldId, fieldType, fieldName) {
        let fieldHtml = `<div id="${fieldId}" class="mt-3">`;
        fieldHtml += `<label class="form-label">Custom ${fieldType} field</label>`;
        fieldHtml += `<input type="hidden" name="CustomFields.Index" value="${fieldId}" />`;
        fieldHtml += `<input type="hidden" name="CustomFields[${fieldId}].Type" value="${fieldType}" />`;
        fieldHtml += `<input type="text" class="form-control mb-1" name="CustomFields[${fieldId}].Name" placeholder="Field name" value="${fieldName}" />`;
        fieldHtml += `<button type="button" class="btn btn-danger mt-1" onclick="removeField('${fieldId}')">Remove</button>`;
        fieldHtml += `</div>`;

        return fieldHtml;
    }


    function removeField(fieldId) {
        const fieldElement = document.getElementById(fieldId);
        if (fieldElement) {
            fieldElement.remove();
        }
    }

    function renderExistingCustomFields() {
        customFields.forEach(field => {
            var htmlField = createField(field.id, field.type, field.name);
            document.getElementById("customFieldsContainer").insertAdjacentHTML("beforeend", htmlField);
        });
    }

    window.onload = function () {
        renderExistingCustomFields();
    }
</script>